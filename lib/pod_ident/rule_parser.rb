# frozen_string_literal: true

require 'yaml'
require 'pry'

module PodIdent
  class RuleParser
    RULES_YAML = File.expand_path('../detection_rules.yml', __dir__)
    RULES_RUBY = File.expand_path('detection_rules.rb', __dir__)
    RULES_SPEC_RUBY = File.expand_path('../../spec/detection_rules.rb', __dir__)
    DO_NOT_EDIT_TEXT = <<~HEREDOC
      # DO NOT EDIT THIS FILE - it gets automatically generated by running \"bin/parse-rules\"\n
    HEREDOC

    attr_accessor :rules

    def call
      parse_yaml
      write_rules_rb
      write_rules_spec_rb
    end

    private

    def write_rules_rb
      cleaned_rules = rules.dup.map do |rule|
        {
          app: rule['app'],
          match: rule['match'],
          platform: rule['platform']
        }
      end

      File.open(RULES_RUBY, 'w') do |file|
        file.write(DO_NOT_EDIT_TEXT)
        file.write("RULES = #{cleaned_rules}.freeze")
      end
    end

    def write_rules_spec_rb
      all_rules = rules.dup.map do |rule|
        # symbolize keys
        Hash[rule.map { |(k, v)| [k.to_sym, v] }]
      end

      File.open(RULES_SPEC_RUBY, 'w') do |file|
        file.write(DO_NOT_EDIT_TEXT)
        file.write("RULES = #{all_rules}.freeze")
      end
    end

    def parse_yaml
      @rules = YAML.safe_load(rules_yaml_file_content)
    end

    def rules_yaml_file_content
      File.read(RULES_YAML).gsub('\\\\', '\\')
    end
  end
end
